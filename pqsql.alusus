import "Srl/Console.alusus";
import "libpq.so";
/*
    Linux .so | .so.0
    Mac OS .dylib
    Windows .lib
*/

module PostgresSql {
	def Connection:{
		def OK: 0;
		def BAD: 1;
			
			}
	def Result:{
		def EMPTY_QUERY: 0;
		def COMMAND_OK: 1;
		def TUPLES_OK: 2;
		def COPY_OUT: 3;
		def COPY_IN: 4;
		def BAD_RESPONSE: 5;
		def NONFATAL_ERROR: 6;
		def FATAL_ERROR: 7;
		def COPY_BOTH: 8;
		def SINGLE_TUPLE: 9;
		def PIPELINE_SYNC: 10;
		def PIPELINE_ABORTED: 11;	
			}
    class PGconn{}
    class PGresult{}
    class Db {
	
        use Srl;
        def conn: ptr[PGconn] ;
        def res: ptr[PGresult] ;
	def result_state: int ;



        handler this~init(connstring: CharsPtr) {
          this.conn=  connect(connstring);
          
        }
        

        handler this.exec(sql: CharsPtr) {
            
           this.res= PostgresSql.exec(this.conn,sql);
            
        }
        handler this.connStatus(): int {
            return PostgresSql.connStatus(this.conn);
        }

        handler this.resStatus():int {
            return PostgresSql.resStatus(this.res);
        }
        handler this.getValue(row : int , collomn : int):CharsPtr {
            return PostgresSql.getValue(this.res , row , collomn);
        }
        handler this.getCols():int {
            return PostgresSql.getCols(this.res);
        }
        handler this.getRows():int {
            return PostgresSql.getRows(this.res);
        }
        handler this.clearResult(){
             PostgresSql.clearResult(this.res);
        }

        handler this.endConnection(){
             PostgresSql.endConnection(this.conn);
        }

        handler this.errorMessage():CharsPtr{
             return PostgresSql.errorMessage(this.conn);
        }

        handler this.getColsName(collomn : int):CharsPtr {
            return PostgresSql.getColsName(this.res , collomn);
        }

        handler this.execWithParams(query : CharsPtr , numberOfParam : int , paramValues : array[CharsPtr] , dataType : int) {
             this.res= PostgresSql.execWithParams(this.res , query , numberOfParam , null , paramValues , null , null , dataType);
        }
    }    
    @expname[PQconnectdb]
    func connect(connString: CharsPtr): ptr[PGconn];
    
    @expname[PQexec]
    func exec(conn: ptr[PGconn] , query: CharsPtr): ptr[PGresult];

    @expname[PQstatus]
    func connStatus(conn: ptr[PGconn] ): int;

    @expname[PQresultStatus]
    func resStatus(res: ptr[PGresult] ): int;

    @expname[PQgetvalue]
    func getValue(res: ptr[PGresult] , row: int , collomn : int): CharsPtr;

    @expname[PQntuples]
    func getRows(res: ptr[PGresult]): int;

    @expname[PQclear]
    func clearResult(res: ptr[PGresult]);

    @expname[PQfinish]
    func endConnection(conn: ptr[PGconn]);

    @expname[PQerrorMessage]
    func errorMessage(conn: ptr[PGconn]):CharsPtr;

    @expname[PQnfields]
    func getCols(res: ptr[PGresult]):int;

    @expname[PQfname]
    func getColsName(res: ptr[PGresult] , colNumber: int):CharsPtr;

    @expname[PQexecParams]
    func execWithParams(conn: ptr[PGconn] , query: CharsPtr , numberOfParam : int , server : int , paramValues : array[CharsPtr] , ptr[int] , ptr[int] , dataType : int ):ptr[PGresult];

}