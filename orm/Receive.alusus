import "Data";
module Receive
{
    class Receive
    {
        use DataType;
        def ConString : String;
        def ExecString : String;
        def CString : String;
        def DataFiledString : String = "*";
        def TableName : String;
        def OrderByString : String;
        def HavingString : String;
        def Data : Array[Array[ptr[Data]]];
        def DataClass : Array[ptr[Data]];
        def DataBaseType : int;
        def PgSqlObj : PostgresSql.Db;
        def MySqlObj : MySql.Db ;
        def SqliteObj : Sqlite.Db;
        def ColsName : Array[String];
        def RowString : Array[CharsPtr];
        def DbCon : DbConBuilder;
        handler this.setDbCon(DbCon : DbConBuilder)  
        {
            this.DbCon=DbCon;

        }
        handler this.getDbCon() : DbConBuilder 
        {
            return this.DbCon; 
        }

        handler this.setCString(Cond : String)  
        {
            this.CString="";
            if(Cond!="")
            {
                this.CString="WHERE ";
                this.CString=this.CString + Cond;
            }  
        }
        handler this.getCString() : String 
        {
            return this.CString; 
        }

        handler this.setDataFiledString(DataFiled : Array[String])  
        {
            this.DataFiledString="*";
            if(DataFiled.getLength()!=0)
            {
                def i : int;
                this.DataFiledString="( ";
                for i=0 , i<DataFiled.getLength() , i=i+1
                    this.DataFiledString=this.DataFiledString +" , "+DataFiled(i) ;
            }  
        }
        handler this.getDataFiledString() : String 
        {
            return this.DataFiledString; 
        }

        handler this.setTableName(TableNames : Array[String])  
        {
            this.TableName="";
            def i : int;
            if (TableNames.getLength()==1)
            {
                this.TableName=TableNames(0) ;
            }
            else if (TableNames.getLength()==0)
            {
                this.TableName="";
            }
            else 
            {
                this.TableName="(";
                this.TableName=this.TableName + TableNames(0);
                for i=1 , i<TableNames.getLength() , i=i+1
                    this.TableName=this.TableName+" , " +TableNames(i) ;
                this.TableName=this.TableName + ")";
            }            
        }
        handler this.getTableName() : String 
        {
            return this.TableName; 
        }

        handler this.setOrderByString(TableNames : Array[String])  
        {
            this.OrderByString="";
            def i : int;
            if (TableNames.getLength()==1)
            {
                this.OrderByString=TableNames(0) ;
            }
            else if (TableNames.getLength()==0)
            {
                this.OrderByString="";
            }
            else 
            {
                this.OrderByString="(";
                this.OrderByString=this.OrderByString + TableNames(0);
                for i=1 , i<OrderByString.getLength() , i=i+1
                    this.OrderByString=this.OrderByString+" , " +TableNames(i) ;
                this.OrderByString=this.OrderByString+")";
            }            
        }
        handler this.getOrderByString() : String 
        {
            return this.OrderByString; 
        }

        handler this.setHavingString(cond : String)  
        {
            this.HavingString="";
            if (cond.getLength()!=0)
            {
                this.HavingString="HAVING ( " ;
                this.HavingString=this.HavingString + cond + " )" ;
            }
        }
        handler this.getHavingString() : String 
        {
            return this.HavingString; 
        }

        handler this.setDataClass(DataClass : Array[ptr[Data]])  
        {
            this.DataClass=DataClass;
        }
        handler this.getDataClass() : Array[ptr[Data]] 
        {
            return this.DataClass; 
        }

        handler this.setExecString()  
        {
            this.ExecString="SELECT ";
            this.ExecString=this.ExecString + this.DataFiledString + "\n";
            this.ExecString=this.ExecString + "FROM " + this.TableName + "\n";
            if (this.CString!="")
            {
                this.ExecString=this.ExecString +  this.CString + "\n";
            }
            if (this.OrderByString!="")
            {
                this.ExecString=this.ExecString +  this.OrderByString + "\n";
            }
            if (this.HavingString!="")
            {
                this.ExecString=this.ExecString +  this.HavingString + "\n";
            }   
        }
        handler this.getExecString() : String 
        {
            return this.ExecString; 
        }

        handler this.setConString(ConString : String)  
        {
            this.ConString=ConString; 
        }
        handler this.getConString() : String 
        {
            return this.ConString; 
        }

        handler this.setDataBaseType(DataBaseType : int)  
        {
            this.DataBaseType=DataBaseType; 
        }
        handler this.getDataBaseType() : int 
        {
            return this.DataBaseType; 
        }
        handler this.convertData(DataRow:ptr[Array[ptr[Data]]]) 
        {
            for i=0 , i<this.DataClass.getLength() , i+=1
            {
                if this.DataClass(i)~cnt.IsIntValue==1
                {
                   
                }
                else if this.DataClass(i)~cnt.IsFloatValue==1
                {
                    DataRow~cnt.add(Data.setIntValue (parseFloat(this.RowString(i))));
                }
                else if this.DataClass(i)~cnt.IsCharValue==1
                {
                     DataRow~cnt.add(Data.setCharValue(this.RowString(i)(0));
                }
                else 
                {
                    DataRow~cnt.add(Data.setStringValue(this.RowString(i));
                }
                t

            }
        
        }
        handler this.setData()  
        {
            this.Data.clear();
            if (this.DataBaseType==0)//sql
            { 
                def MySqlObjPtr : ptr[MySql.Db];
                MySqlObjPtr=this.DbCon.mySqlConBuilder();
                this.MySqlObj=MySqlObjPtr~cnt;
                if(this.MySqlObj.conn==null)
                {
                    Console.print("connection error %s \n",this.MySqlObj.errorMessage() );
                }
                else
                {
                    this.MySqlObj.exec(this.ExecString);
	            if (this.MySqlObj.result_state != 0)
		        Console.print("%s \n",this.MySqlObj.errorMessage() );
                    else
                    {
                        this.MySqlObj.storeRes();
                        if (this.MySqlObj.res==null)
                            Console.print(" %s \n",mysql.errorMessage() );
                    }
	            def numFields:int;
	            numFields=this.MySqlObj.getFiledsNumber();
                    this.MySqlObj.getRow();
                    this.MySqlObj.getCol();
                    def i:int;
                    def RowData : ptr[Array[ptr[Data]]];
                    while(this.MySqlObj.row!=null)
                    {
                        for i = 0, i < numFields, i = i+1
                        {
                            if (i==0)
                            {
                                while(this.MySqlObj.field!=null)
                                {
                                    this.ColsName.add(this.MySqlObj.field~cnt.name)
                                    this.MySqlObj.getCol();
                                }
                            }
                            this.RowString.add(this.MySqlObj.row~cnt(i));
                        }
                        RowData=this.convertData();
                        this.Data.add(RowData~cnt);
                        this.RowString.clear();
                        this.MySqlObj.getRow();
                    }
                    this.MySqlObj.clearResult();
	            this.MySqlObj.endConnection();
                   
                }
            }

            else if (this.DataBaseType==1)//sqlite
            {
                def SqliteObjPtr : ptr[Sqlite.Db];
                SqliteObjPtr=this.DbCon.sqLiteConBuilder();
                this.SqliteObj=SqliteObjPtr~cnt;
                if(this.SqliteObj.conn==null)
                {
                    Console.print("connection error %s \n",this.SqliteObj.errorMessage() );
                }
                else
                {
                    this.SqliteObj.exec(this.ExecString);
	            if (this.SqliteObj.result_state != 0)
		        Console.print("%s \n",SqliteObj.errorMessage() );
                    else
                    {
                        this.SqliteObj.storeRes();
                        if (this.SqliteObj.res==null)
                            Console.print(" %s \n",SqliteObj.errorMessage() );
                    }
	            def numFields:int;
                    this.RowString.clear();
                    this.ColsName.clear();
	            numFields=this.SqliteObj.getFiledsNumber();
                    this.SqliteObj.getRow();
                    this.SqliteObj.getCol();
                    def i:int;
                    def RowData : Array[ptr[Data]];
                    while(this.SqliteObj.row!=null)
                    {
                        for i = 0, i < numFields, i = i+1
                        {
                            if (i==0)
                            {
                                while(SqliteObj.field!=null)
                                {
                                    this.ColsName.add(this.SqliteObj.field~cnt.name)
                                    this.SqliteObj.getCol();
                                }
                            }
                            this.RowString.add(this.SqliteObj.row~cnt(i));
                        }
                        this.convertData(RowData~ptr);
                        this.Data.add(RowData);
                        this.RowString.clear();
                        this.SqliteObj.getRow();
                    }
                    this.SqliteObj.clearResult();
	            this.SqliteObj.endConnection();
                }                    
            }

            else if (this.DataBaseType==2)//pgsql
            {
                def PgSqlObjPtr : ptr[PostgresSql.Db];
                SqliteObjPtr=this.DbCon.pgSqlConBuilder();
                this.PgSqlObj=PgSqlObjPtr~cnt;
                if(this.PgSqlObj.connStatus()==PostgresSql.Connection.BAD)
                {
                    Console.print("connection error %s \n",this.PgSqlObj.errorMessage() );
                }
                else
                {
                    this.PgSqlObj.exec(this.ExecString);
	            if (this.PgSqlObj.resStatus() != this.PostgresSql.Result.TUPLES_OK ||this.PgSqlObj.resStatus() != this.PostgresSql.Result.COMMAND_OK  )
		    {   
                        Console.print("%s \n",this.PgSqlObj.errorMessage() );
                        this.PgSqlObj.endConnection();
                    }
                    else
                    {
                        this.ColsName.clear();
                        def numFields:int;
	                numFields=this.PgSqlObj.getCols();
	                numRows=this.PgSqlObj.getRows();
                        def i:int;
                        def j :int;
                        def RowData : ptr[Array[ptr[Data]]];
                        for i = 0, i < numFields, i = i+1
                        {
                            this.ColsName.add(this.PgSqlObj.getColsName(i));
                        }
                        for i = 0, i < numRows, i = i+1
                        {
                            for j = 0, j < numFields, j = j+1
                                this.RowString.add(this.PgSqlObj.getValue(i,j));
                            this.convertData(RowData);
                            this.Data.add(RowData~cnt);
                            this.RowString.clear();
                        }
                        this.PgSqlObj.clearResult();
                        this.PgSqlObj.endConnection();
                    }
                }                    
            }       
        }
    }
}