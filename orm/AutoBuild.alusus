import "Data";
import "Srl/refs";
import "Create";
import "Srl/Console";
import "Srl/refs";
import "Srl/System";
import "Core/Data";
import "Spp";
import "Receive";
import "DbConBuilder";
use Srl;
use Core.Basic;
use Core.Data;
use Core.Data.Ast;

module AutoBuild
{
use DataType;
def TioSrdRef: alias SrdRef[Core.Basic.TiObject];
def DataTypeArray:Array[String];
def DataTypeString : String;
def DataTypePtr : ptr[Data];
def paramsModsArray : Array[String];
def val : String;
def integerDataType : DataType.Integer;
def bigIntegerDataType : DataType.BigInteger;
def smallIntegerDataType : SmallInteger;
def tinyIntegerDataType : TinyInteger;
def realDataType : Real;
def floatDataType : Float;

def decimalDataType : Decimal;
def xmlDataType : Xml;
def varCharDataType : VarChar;
def charTypeDataType : CharType;
def textDataType : Text;
def datesDataType : Dates;
function generateArrays()
{
   DataTypeString="Integer";
   DataTypeArray.add(DataType);
   DataTypeString="BigInteger";
   DataTypeArray.add(DataType);
   DataTypeString="SmallInteger";
   DataTypeArray.add(DataType);

   DataTypeString="TinyInteger";
   DataTypeArray.add(DataType);
   DataTypeString="Real";
   DataTypeArray.add(DataType);
   DataTypeString="Float";
   DataTypeArray.add(DataType);

   DataTypeString="Decimal";
   DataTypeArray.add(DataType);
   DataTypeString="Xml";
   DataTypeArray.add(DataType);
   DataTypeString="VarChar";
   DataTypeArray.add(DataType);

   DataTypeString="CharType";
   DataTypeArray.add(DataType);
   DataTypeString="Text";
   DataTypeArray.add(DataType);
   DataTypeString="Dates";
   DataTypeArray.add(DataType);

    val="notnull";
    paramsModsArray.add(val);
    val="unique";
    paramsModsArray.add(val);
    val="def";
    paramsModsArray.add(val);
    val="check";
    paramsModsArray.add(val);
    val="pk";
    paramsModsArray.add(val);
    val="fk";
    paramsModsArray.add(val);
}
function generateAddingElementNames (varName: String, elements: Array[ref[Core.Basic.TiObject]]) {
    def i: Int;
    for i = 0, i < elements.getLength(), ++i {

        def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);

        def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);

        Spp.astMgr.insertAst(
            ast { names.add(Srl.String("{{name}}")) },
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                .set(Srl.String("name"), binding.getMember("name"))

        );

    }
}


function generateAddingElementMods (elements: Array[ref[Core.Basic.TiObject]]) : Array[Array[String]] {
    def i: Int;
    def colsMod : Array[Array[String]];
    def strArray : Array[String];

    for i = 0, i < elements.getLength(), ++i {
        strArray=AutoBuild.dumpModifiers(elements(i));
        colsMod.add(strArray);
    }
    return colsMod;
}

function generateAddingElementTypes (varName: String, elements: Array[ref[Core.Basic.TiObject]]) {
    def i: Int;
    for i = 0, i < elements.getLength(), ++i {
        def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
        def containing: ref[Core.Basic.MapContaining](Core.Basic.getInterface[d, Core.Basic.MapContaining]);
        Spp.astMgr.insertAst(
            ast { names.add(Srl.String("{{name}}")) },
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                .set(Srl.String("name"), castRef[containing.getElement("target"), Core.Data.Ast.Identifier])

        );

    }
}
macro implementGetElementNames [condition, parent  ] {

        Array[String]().{
        preprocess {
            def elements: Array[ref[Core.Basic.TiObject]];
            elements = Spp.astMgr.findElements(
                ast { condition },
                parent,
               Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
            );
            AutoBuild.generateAddingElementNames(String("this"), elements);
        }}

}

macro implementGetElementMods [condition, parent  ] {


        preprocess {
            def elements: Array[ref[Core.Basic.TiObject]];
            elements = Spp.astMgr.findElements(
                ast { condition },
                parent,
                Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
            );
            colsMod=AutoBuild.generateAddingElementMods( elements);
            def params : Array[String];
            for i=0 , i<colsMod.getLength() , ++i
            {
                for j=0 , j<colsMod(i).getLength() , ++j
                {

                    params=AutoBuild.dumpElementModifierParams(elements(i),colsMod(i)(j).buf);
                    modsParams.add(params);

                }

            }
        }

}
macro implementGetElementTypes [condition, parent] {
    Array[String]().{
    preprocess {
        def elements: Array[ref[Core.Basic.TiObject]];
        elements = Spp.astMgr.findElements(
            ast { condition },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        AutoBuild.generateAddingElementTypes(String("this"), elements);
    }
   }
}

function numOfParams (Mod : String) : int {

    def i: Int;
    def paramsModsArray : Array[String];
    def val : String;
    val="notnull";
    paramsModsArray.add(val);
    val="unique";
    paramsModsArray.add(val);
    val="pk";
    paramsModsArray.add(val);
    val="defult";
    paramsModsArray.add(val);
    val="check";
    paramsModsArray.add(val);

    val="fk";
    paramsModsArray.add(val);
    for i = 0, i < paramsModsArray.getLength()-1, ++i
     {
        if (Mod== paramsModsArray(i))
        {
            if (i<3)
            {
                return 0;
            }
            else if(i<5)
            {
                return 1;
            }
            else if(i==5)
            {
                return 2;
            }

        }

    }

    return -1;
}


function dumpModifiers (element: ref[Core.Basic.TiObject]) : Array[String] {
    def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
    def i: Int;
    def strArray : Array[String] ;
    if(modifiers~ptr!=0)
    {
    for i = 0, i < modifiers.getElementCount()~cast[Int], ++i {
        strArray.add(Spp.astMgr.getModifierKeyword(modifiers.getElement(i)));

    }}
    return strArray;
}

function dumpModifierParams(modifier: ref[Core.Basic.TiObject]) : Array[String] {
    def params: Srl.Array[Srl.String];

    Spp.astMgr.getModifierStringParams(modifier, params);
    return params;
}

function dumpElementModifierParams(element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]) : Array[String] {
    def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
    def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifier(modifiers, modName));
    def params : Array[String];

    params=dumpModifierParams(modifier);
    return params;

}

function dumpElementModifierParams2(element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]) {
    def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(element, modName));
    dumpModifierParams(modifier);
}

function isDataType(varType : String) : int
{
   def si : int ;
   def DataTypeArray:Array[String];
   def DataTypeString : String;
   DataTypeString="Integer";
   DataTypeArray.add(DataTypeString);
   DataTypeString="BigInteger";
   DataTypeArray.add(DataTypeString);
   DataTypeString="SmallInteger";
   DataTypeArray.add(DataTypeString);

   DataTypeString="TinyInteger";
   DataTypeArray.add(DataTypeString);
   DataTypeString="Real";
   DataTypeArray.add(DataTypeString);
   DataTypeString="Float";
   DataTypeArray.add(DataTypeString);

   DataTypeString="Decimal";
   DataTypeArray.add(DataTypeString);
   DataTypeString="Xml";
   DataTypeArray.add(DataTypeString);
   DataTypeString="VarChar";
   DataTypeArray.add(DataTypeString);

   DataTypeString="CharType";
   DataTypeArray.add(DataTypeString);
   DataTypeString="Text";
   DataTypeArray.add(DataTypeString);
   DataTypeString="Dates";
   DataTypeArray.add(DataTypeString);
   for si=0 , si< DataTypeArray.getLength() , ++si
   {

          if(DataTypeArray(si)==varType)
          {
              return si;
          }


   }
   return -1;


}

macro autoDet [parent , tableName ]
{
    use DataType;

    def DataTypePtr : ptr[Data];
    def paramsModsArray : Array[String];
    def val : String;
    def integerDataType : DataType.Integer;
    def bigIntegerDataType : DataType.BigInteger;
    def smallIntegerDataType : SmallInteger;
    def tinyIntegerDataType : TinyInteger;
    def realDataType : Real;
    def floatDataType : DataType.Float;
    def decimalDataType : Decimal;
    def xmlDataType : Xml;
    def varCharDataType : VarChar;
    def charTypeDataType : CharType;
    def textDataType : Text;
    def datesDataType : Dates;
    def var : Array[String];
    def colsMod : Array[Array[String]];
    def modsParams : Array[Array[String]];
    def pkArray : Array[String];
    def tableConst :Constraints.TableConstraints;
    def table : Create.Create;
    def colsName : Array[String];
    def tableNameMod : String;

    var=AutoBuild.implementGetElementNames[elementType == "var", parent];
    def types : Array[String];
    types=AutoBuild.implementGetElementTypes[elementType == "var", parent];
    def i : int;
    def j : int;
    def k : int;
    def c : int;
    def index: int;

    c=-1;
    AutoBuild.implementGetElementMods[elementType == "var", parent];

    for i=0 , i< var.getLength() , i+=1
       {

        index=AutoBuild.isDataType(types(i));



        if(index>-1)
        {
            table.setColsName(var(i));
            if (index==0)
            {
                integerDataType

                DataTypePtr = integerDataType~ptr;
            }
            else if (index==1)
            {
                DataTypePtr = bigIntegerDataType~ptr;
            }
            else if (index==2)
            {
                DataTypePtr = smallIntegerDataType~ptr;
            }
            else if (index==3)
            {
                DataTypePtr = tinyIntegerDataType~ptr;
            }
            else if (index==4)
            {
                DataTypePtr = realDataType~ptr;
            }
            else if (index==5)
            {
                DataTypePtr = floatDataType~ptr;
            }
            else if (index==6)
            {
                DataTypePtr = decimalDataType~ptr;
            }
            else if (index==7)
            {
                DataTypePtr = xmlDataType~ptr;
            }
            else if (index==8)
            {
                DataTypePtr = varCharDataType~ptr;
            }
            else if (index==9)
            {
                DataTypePtr = charTypeDataType~ptr;
            }
            else if (index==10)
            {
                DataTypePtr = textDataType~ptr;
            }
            else if (index==11)
            {
                DataTypePtr = datesDataType~ptr;
            }
        Console.print("var %s ",var(i).buf);
        Console.print("type %s ",types(i).buf);


        Console.print("\n");
        for j=0 , j< colsMod(i).getLength() , j+=1
       {
           ++c;


           Console.print(" ");
           if(AutoBuild.numOfParams(colsMod(i)(j))!=-1)
           {
                Console.print(colsMod(i)(j));
                if(colsMod(i)(j)=="notnull")
                {
                    DataTypePtr~cnt.FConstrants.setNotNullConstraint();
                }
                else if(colsMod(i)(j)=="unique")
                {
                    DataTypePtr~cnt.FConstrants.setUniqueConstraint();
                }
                else if(colsMod(i)(j)=="pk")
                {
                    pkArray.add(var(i));
                }

                if(AutoBuild.numOfParams(colsMod(i)(j))>0)
                {
                    Console.print("\n params for this mod : \n");
                    if(colsMod(i)(j)=="defult")
                    {
                        DataTypePtr~cnt.FConstrants.setDefaultConstraint(modsParams(c)(0));
                    }
                    else if(colsMod(i)(j)=="check")
                    {
                        DataTypePtr~cnt.FConstrants.setCheckConstraint(modsParams(c)(0));
                    }
                    else if(colsMod(i)(j)=="fk")
                    {
                        tableConst.addForgenKey(modsParams(c)(0),modsParams(c)(1),modsParams(c)(2))
                    }


                    for k=0 , k<modsParams(c).getLength() , ++k
                    {
                        Console.print(modsParams(c)(k));
                        Console.print(" ");
                    }
                }

        Console.print("\n");
        }


        }
        table.setDataType(DataTypePtr);
        table.addToColsString();

       }
    }

    tableConst.setPrimaryKeyConstraint(pkArray);
    table.setTConst(tableConst~ptr);
    table.setTConstString();
    table.setExecString();
    table.setTableName(tableName);
    def ex:String;
    table.setExecString();
    ex=table.getExecString();
    Console.print(ex);
    Console.print("\n");

}

def TioSrdRef: alias SrdRef[Core.Basic.TiObject];

func generateDataType (  ): TioSrdRef {
    def result: TioSrdRef;

     def list: SrdRef[Core.Data.Ast.Scope] = newSrdObj[Core.Data.Ast.Scope];

def listContainer: DynContainerOf[list.obj];


                if !Spp.astMgr.buildAst(
           ast {myType= String("Cars")  },
            Map[String, ref[TiObject]]()
                .set(String("myType"), Core.Data.Ast.Identifier(String("myType")))
                .set(String("varType"), Core.Data.Ast.Identifier(String("varType"))),

            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);

    return castSrdRef[list, TiObject];
}

macro genareteDataType [dataType] {

    preprocess {
        if !Spp.astMgr.insertAst(
            AutoBuild.generateDataType( ).obj
        ) {
            System.fail(1, "Failed to genrate data type.\n");
        }
    }
}

//func generateDataTable (obj: ref[TiObject] , className: String , conn : DbConBuilder.DbConBuilder , tableNames : Array[String]  , var : Array[String] , types : Array[String]): TioSrdRef {
func generateDataTable ( ): TioSrdRef {
    def result: TioSrdRef;

     def list: SrdRef[Core.Data.Ast.Scope] = newSrdObj[Core.Data.Ast.Scope];

def listContainer: DynContainerOf[list.obj];

def myType : String;
AutoBuild.genareteDataType["s"];
                if !Spp.astMgr.buildAst(
           ( ast def table : Receive.Receive  ),
            Map[String, ref[TiObject]]()
                .set(String("table"), Core.Data.Ast.Identifier(String("table")))
                .set(String("tableNames"), Core.Data.Ast.Identifier(String("tableNames"))),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj);



                if !Spp.astMgr.buildAst(
           ( ast def myNumber : int ),
            Map[String, ref[TiObject]](),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj);

                       if !Spp.astMgr.buildAst(
            ast {myNumber  = num},
            Map[String, ref[TiObject]]()
            .set(String("num"), Core.Data.Ast.IntegerLiteral(String("17"))),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj);









                              if !Spp.astMgr.buildAst(
           ( ast def  mySqlObj : MySql.Db  ),
            Map[String, ref[TiObject]]()
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj"))),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj);

                                     if !Spp.astMgr.buildAst(
           ( ast def  c : Myclass  ),
            Map[String, ref[TiObject]]()
                .set(String("Myclass"), Core.Data.Ast.Identifier(myType)),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj);

                                            if !Spp.astMgr.buildAst(
           ( ast   c.i = String("Sleman D alrstum")  ),
            Map[String, ref[TiObject]]()
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj"))),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj);

                                     if !Spp.astMgr.buildAst(
           ( ast def  dataArray : Array[Array[String]] ),
            Map[String, ref[TiObject]]()
                .set(String("dataArray"), Core.Data.Ast.Identifier(String("dataArray"))),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj);

                              if !Spp.astMgr.buildAst(
            ast{      if DbCon.getDbConType()==0 {    mySqlObj=DbCon.mySqlConBuilder();  table.setMySqlObj(mySqlObj);}  table.setData(); },
            Map[String, ref[TiObject]]()
                .set(String("table"), Core.Data.Ast.Identifier(String("table")))
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon")))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj"))),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj)





                       if !Spp.astMgr.buildAst(
            ast{ table.setTableName(tableNames);
             table.setExecString();
             dataArray= table.getData();
             if (5 < 7) Console.print("haha \n");  },
            Map[String, ref[TiObject]]()
                .set(String("table"), Core.Data.Ast.Identifier(String("table")))
                .set(String("dataArray"), Core.Data.Ast.Identifier(String("dataArray")))
                .set(String("tableNames"), Core.Data.Ast.Identifier(String("tableNames"))),

            result
        ) {
            System.fail(1, "generateDataTable/build table var : error\n");
        }
       listContainer.addElement(result.obj);



    return castSrdRef[list, TiObject];
}

macro genareteDataAsString [c] {

    preprocess {
        if !Spp.astMgr.insertAst(
            AutoBuild.generateDataTable( ).obj
        ) {
            System.fail(1, "Failed to genrate data.\n");
        }
    }
}

func test (name : String , DbsCon: DbConBuilder.DbConBuilder , myClass : ref[TiObject] , className : String ) {
    def par : String;
    def var : Array[String];
    def types : Array[String];
    var=AutoBuild.implementGetElementNames[elementType == "var",Cars~ast];
    types=AutoBuild.implementGetElementTypes[elementType == "var", Cars~ast];
    def i : int;
    for i=0, i< var.getLength() , i=i + 1
         Console.print(var(i)+"\n");



    par=name;
    def tableNames : Array[String];
    def varType : String;
    varType = className;
    def DbCon : DbConBuilder.DbConBuilder;
    DbCon=DbsCon;
    tableNames.add(par);


    def firstName: String("Mohammed");
    def position: String("Engineer");
    def sw: String="dfg";

    def query: String="ww";
     AutoBuild.genareteDataAsString[varType];

     dataArray.add(tableNames);
     //myNumber=7;

    Console.print(table.getExecString()+"\n");
    Console.print(mySqlObj.getDbName()+"\n");
    Console.print(dataArray(0)(0)+"  from array \n");
    Console.print(myNumber);
    Console.print("  \n");
        Console.print(c.i);
    Console.print("  \n");


}
macro getData[parent,dbcon,tableName]
{
    def result: SrdRef[Core.Basic.TiObject];

    def types : Array[String];
    types=AutoBuild.implementGetElementTypes[elementType == "var", parent~ast];

        def var : Array[String];
    var=AutoBuild.implementGetElementNames[elementType == "var", parent~ast];
    i =0;
    def Dataw : Array[Array[String]];
    def table : Receive.Receive;
    def resultArray : Array[SrdRef[Core.Basic.TiObject]];
    def t : Array[String];
    t.add(tableName);
    table.setTableName(t);
    table.setExecString();
    Console.print(table.getExecString()+"\n");
    if (dbcon.DbConType==0)
    {
         def  MySqlObj : MySql.Db;
         MySqlObj=dbcon.mySqlConBuilder();
         table.setMySqlObj(MySqlObj);
         table.setData();
         Dataw=table.getData();

    }
    def i : int=0;
    def j : int=0;
    for i=0 ,i< Dataw.getLength(), i = i+ 1
    {
           for j=0 ,j< Dataw(i).getLength(), j = j+ 1
           {
               if types(j)=="string"
               {
                    def val : String;
                    def myVar : String;
                    myVar=var(j);
                    val=Dataw(i)(j);
                    //def binding: ref[Binding](getInterface[parent~ast, Binding]);
                    //def mapContaining: ref[MapContaining](getInterface[parent~ast, MapContaining]);
                    if !Spp.astMgr.buildAst(
                              ast { def t : mytable  },
                              Map[String, ref[TiObject]]()
                                  .set(Srl.String("mytable"), Core.Data.Ast.Identifier(tableName.buf))
                                  .set(Srl.String("myvar"), Core.Data.Ast.Identifier(myVar))
                                  .set(String("val"), val),
                                  result
                                                                 ) {
                                                      System.fail(1, "getData Erorr/stringType\n");
                                                                   }


               }

               if types(j)=="int"
               {
                    def val : String;
                    def myVar : String
                    def intVal : int;
                    val=Dataw(i)(j);
                    intVal=Receive.getInt(val.buf);
                    myVar=var(j);
                    //def binding: ref[Binding](getInterface[parent~ast, Binding]);
                    //def mapContaining: ref[MapContaining](getInterface[parent~ast, MapContaining]);



               }

               if types(j)=="float"
               {
                    def val : String;
                    def myVar : String
                    def floatVal : float;
                    val=Dataw(i)(j);
                    floatVal=Receive.getFloat(val.buf);
                    myVar=var(j);
                    //def binding: ref[Binding](getInterface[parent~ast, Binding]);
                    //def mapContaining: ref[MapContaining](getInterface[parent~ast, MapContaining]);
                    if !Spp.astMgr.buildAst(
                              ast { mytable.myvar=val  },
                              Map[String, ref[TiObject]]()
                                  .set(Srl.String("mytable"), Core.Data.Ast.Identifier(tableName.buf))
                                  .set(Srl.String("myvar"), Core.Data.Ast.Identifier(myVar))
                                  .set(String("val"), floatVal),
                                  result
                                                                 ) {
                                                      System.fail(1, "getData Erorr/intType\n");
                                                                   }


               }

           }
           resultArray.add(result);


    }




}


}
