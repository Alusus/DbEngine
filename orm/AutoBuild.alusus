import "Data";
import "Srl/refs";
module AutoBuild
{
use DataType;
def DataTypeArray:Array[String];
def DataTypeString : Srring;
def DataTypePtrArray : Array[ptr[Data]];

def paramsModsArray : Array[String];
def val : String;
def integerDataType : Integer;
def bigIntegerDataType : BigInteger;
def smallIntegerDataType : SmallInteger;
def tinyIntegerDataType : TinyInteger;
def realDataType : Real;
def floatDataType : Float;

def decimalDataType : Decimal;
def xmlDataType : Xml;
def varCharDataType : VarChar;
def charTypeDataType : CharType;
def textDataType : Text;
def datesDataType : Dates;

function generateArrays()
{
   DataTypeString="Integer";
   DataTypeArray.add(DataType);
   DataTypeString="BigInteger";
   DataTypeArray.add(DataType);
   DataTypeString="SmallInteger";
   DataTypeArray.add(DataType);

   DataTypeString="TinyInteger";
   DataTypeArray.add(DataType);
   DataTypeString="Real";
   DataTypeArray.add(DataType);
   DataTypeString="Float";
   DataTypeArray.add(DataType);

   DataTypeString="Decimal";
   DataTypeArray.add(DataType);
   DataTypeString="Xml";
   DataTypeArray.add(DataType);
   DataTypeString="VarChar";
   DataTypeArray.add(DataType);

   DataTypeString="CharType";
   DataTypeArray.add(DataType);
   DataTypeString="Text";
   DataTypeArray.add(DataType);
   DataTypeString="Dates";
   DataTypeArray.add(DataType);

    val="notnull";
    paramsModsArray.add(val);
    val="unique";
    paramsModsArray.add(val);
    val="def";
    paramsModsArray.add(val);
    val="check";
    paramsModsArray.add(val);
    val="pk";
    paramsModsArray.add(val);
    val="fk";
    paramsModsArray.add(val);
}
function generateAddingElementNames (varName: String, elements: Array[ref[Core.Basic.TiObject]]) {
    def i: Int;
    def colsMod : Array[Array[String]];
    def strArray : Array[String];
    def paramsArray:Array[String]
    for i = 0, i < elements.getLength(), ++i {
        strArray=AutoBuild.dumpModifiers(elements(i));
        def j : int;
        for j=0 , j<strArray.getLength() , ++j
        {
            paramsArray=AutoBuild.dumpElementModifierParams(elements(i),strArray(j).buf);
        }

        colsMod.add(strArray);

        def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);

        def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);

        Spp.astMgr.insertAst(
            ast { names.add(Srl.String("{{name}}")) },
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                .set(Srl.String("name"), binding.getMember("name"))

        );

    }
}

function generateAddingElementMods (elements: Array[ref[Core.Basic.TiObject]]) : Array[Array[String]] {
    def i: Int;
    def colsMod : Array[Array[String]];
    def strArray : Array[String];
    for i = 0, i < elements.getLength(), ++i {
        strArray=AutoBuild.dumpModifiers(elements(i));
        colsMod.add(strArray);
    }
    return colsMod;
}


function generateAddingElementTypes (varName: String, elements: Array[ref[Core.Basic.TiObject]]) {
    def i: Int;
    for i = 0, i < elements.getLength(), ++i {
        def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
        def containing: ref[Core.Basic.MapContaining](Core.Basic.getInterface[d, Core.Basic.MapContaining]);
        Spp.astMgr.insertAst(
            ast { names.add(Srl.String("{{name}}")) },
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                .set(Srl.String("name"), castRef[containing.getElement("target"), Core.Data.Ast.Identifier])

        );

    }
}

macro implementGetElementNames [condition, parent  ] {

        Array[String]().{
        preprocess {
            def elements: Array[ref[Core.Basic.TiObject]];
            elements = Spp.astMgr.findElements(
                ast { condition },
                parent,
                Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
            );
            AutoBuild.generateAddingElementNames(String("this"), elements);
        }}

}
macro implementGetElementMods [condition, parent  ] {


        preprocess {
            def elements: Array[ref[Core.Basic.TiObject]];
            elements = Spp.astMgr.findElements(
                ast { condition },
                parent,
                Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
            );
            colsMod=AutoBuild.generateAddingElementMods( elements);
            def params : Array[String];
            for i=0 , i<colsMod.getLength() , ++i
            {
                for j=0 , j<colsMod(i).getLength() , ++j
                {
                    Console.print("inside micro ");
                    Console.print(colsMod(i)(j));
                    Console.print(" ");

                    params=AutoBuild.dumpElementModifierParams(elements(i),colsMod(i)(j).buf);
                    modsParams.add(params);

                }
                Console.print(" \n");
            }
        }

}
macro implementGetElementTypes [condition, parent] {
    Array[String]().{
    preprocess {
        def elements: Array[ref[Core.Basic.TiObject]];
        elements = Spp.astMgr.findElements(
            ast { condition },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        AutoBuild.generateAddingElementTypes(String("this"), elements);
    }
   }
}

function numOfParams (Mod : String) : int {

    def i: Int;
    for i = 0, i < paramsModsArray.getLength()-1, ++i
     {
        if (Mod== paramsModsArray(i))
        {
            if (i<2)
            {
                return 0;
            }
            else if(i<5)
            {
                return 1;
            }
            else if(i==5)
            {
                return 2;
            }

        }

    }
    return -1;
}


function dumpModifiers (element: ref[Core.Basic.TiObject]) : Array[String] {
    def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
    def i: Int;
    def strArray : Array[String] ;
    for i = 0, i < modifiers.getElementCount()~cast[Int], ++i {
        strArray.add(Spp.astMgr.getModifierKeyword(modifiers.getElement(i)));

    }
    return strArray;
}

function dumpModifierParams(modifier: ref[Core.Basic.TiObject]) : Array[String] {
    def params: Srl.Array[Srl.String];

    Spp.astMgr.getModifierStringParams(modifier, params);
    return params;
}

function dumpElementModifierParams(element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]) : Array[String] {
    def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
    def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifier(modifiers, modName));
    def params : Array[String];

    params=dumpModifierParams(modifier);
    return params;

}

function dumpElementModifierParams2(element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]) {
    def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(element, modName));
    dumpModifierParams(modifier);
}

function isDataType(varType : String) : int
{

   def i : int ;
   for i=0 , i< DataTypeArray.getLength() , ++i
   {
       if (DataTypeArray(i) == varType)
       {
           return i;
       }
   }
   return -1;


}

macro autoDet [parent]
{
    def var : Array[String];
    def colsMod : Array[Array[String]];
    def modsParams : Array[Array[String]];
    var=AutoBuild.implementGetElementNames[elementType == "var", parent];
    def types : Array[String];
    types=AutoBuild.implementGetElementTypes[elementType == "var", parent];
    def i : int;
    def j : int;
    def k : int;
    def c : int;
    def index: int;
    c=-1;
    AutoBuild.implementGetElementMods[elementType == "var", parent];

    for i=0 , i< var.getLength() , i+=1
       {
        Console.print("var %s ",var(i).buf);
        Console.print("type %s ",types(i).buf);
        index=isDataType(types(i));

        if(index>-1)
        {
            if (index==0)
            {
                DataTypePtrArray.add(integerDataType~ptr);
            }
            else if (index==1)
            {
                DataTypePtrArray.add(bigIntegerDataType~ptr);
            }
            else if (index==2)
            {
                DataTypePtrArray.add(smallIntegerDataType~ptr);
            }
            else if (index==3)
            {
                DataTypePtrArray.add(tinyIntegerDataType~ptr);
            }
            else if (index==4)
            {
                DataTypePtrArray.add(realDataType~ptr);
            }
            else if (index==5)
            {
                DataTypePtrArray.add(floatDataType~ptr);
            }
            else if (index==6)
            {
                DataTypePtrArray.add(decimalDataType~ptr);
            }
            else if (index==7)
            {
                DataTypePtrArray.add(xmlDataType~ptr);
            }
            else if (index==8)
            {
                DataTypePtrArray.add(varCharDataType~ptr);
            }
            else if (index==9)
            {
                DataTypePtrArray.add(charTypeDataType~ptr);
            }
            else if (index==10)
            {
                DataTypePtrArray.add(textDataType~ptr);
            }
            else if (index==11)
            {
                DataTypePtrArray.add(datesDataType~ptr);
            }
        }

        Console.print(modsParams.getLength());
        Console.print(" hehe ");
        Console.print(modsParams(3)(1));
        Console.print("\n");
        for j=0 , j< colsMod(i).getLength() , j+=1
       { Console.print(" ");
        Console.print(colsMod(i)(j));
        Console.print("\n params for this mod : \n");
        ++c;
        for k=0 , k<modsParams(c).getLength() , ++k
        {Console.print(modsParams(c)(k));
        Console.print(" ");}
        Console.print("\n");}
       }

c=0;
}

}
