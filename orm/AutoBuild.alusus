import "Data";
import "Srl/refs";
import "Create";
import "Srl/Console";
import "Srl/refs";
import "Srl/System";
import "Core/Data";
import "Spp";
import "Receive";
import "Insert";
import "Update";
import "DbConBuilder";
import "Delete.alusus"
use Srl;
use Core.Basic;
use Core.Data;
use Core.Data.Ast;

module AutoBuild
{
    use DataType;
    def TioSrdRef: alias SrdRef[Core.Basic.TiObject];
    function generateAddingElementNames (varName: String, elements: Array[ref[Core.Basic.TiObject]])
    {
        def i: Int;
        for i = 0, i < elements.getLength(), ++i
        {
            def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
            def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
            def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);
            Spp.astMgr.insertAst(
                ast { names.add(Srl.String("{{name}}")) },
                Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                    .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                    .set(Srl.String("name"), binding.getMember("name"))

            );
        }
    }

    function generateAddingElementTypes (varName: String, elements: Array[ref[Core.Basic.TiObject]])
    {
        def i: Int;
        for i = 0, i < elements.getLength(), ++i
        {
            def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
            def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
            def containing: ref[Core.Basic.MapContaining](Core.Basic.getInterface[d, Core.Basic.MapContaining]);
            Spp.astMgr.insertAst(
                ast { names.add(Srl.String("{{name}}")) },
                Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                    .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                    .set(Srl.String("name"), castRef[containing.getElement("target"), Core.Data.Ast.Identifier])
            );
        }
    }

    macro implementGetElementNames [condition, parent  ]
    {
          Array[String]().
          {
              preprocess
             {
                    def elements: Array[ref[Core.Basic.TiObject]];
                     elements = Spp.astMgr.findElements(
                            ast { condition },
                             parent,
                            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                         );
                    AutoBuild.generateAddingElementNames(String("this"), elements);
             }
          }
    }

    macro implementGetElementTypes [condition, parent]
    {
        Array[String]().
        {
            preprocess
            {
                def elements: Array[ref[Core.Basic.TiObject]];
                elements = Spp.astMgr.findElements(
                    ast { condition },
                    parent,
                    Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                );
                AutoBuild.generateAddingElementTypes(String("this"), elements);
            }
        }
    }



    func generateDataType (className : String  , parent : ref[TiObject] , varArray:Array[String] , typeArray : Array[String] ): TioSrdRef
    {
        def result: TioSrdRef;
        def list: SrdRef[Core.Data.Ast.Scope] = newSrdObj[Core.Data.Ast.Scope];
        def listContainer: DynContainerOf[list.obj];
        def resArray : Array[TioSrdRef];
        def resArray2 : Array[TioSrdRef];
        def resArray3 :Array[TioSrdRef];
        def result2: TioSrdRef;
        def result3: TioSrdRef;
        def i : int=0;
        def iString:String;
        iString="" + i;
        if !Spp.astMgr.buildAst
            (
              (ast use DbConBuilder ),
             Map[String, ref[TiObject]]()
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
        if !Spp.astMgr.buildAst
            (
             (ast def DbCon :DbConBuilder ),
             Map[String, ref[TiObject]]()
                 .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
             result
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        listContainer.addElement(result.obj);
        if !Spp.astMgr.buildAst
            (
            (ast def classData : className ),
            Map[String, ref[TiObject]]()
                .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                .set(String("className"), Core.Data.Ast.Identifier(className)),
            result2
            )
        {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
        resArray.add(result2);

        for i=0 , i< typeArray.getLength() , i=i+1
        {
            iString=String("") + i;
            if (i==0)
            {
                if(typeArray(i)=="String")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  classData.strVal=dataArray(i)(j) ),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("strVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="int")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  classData.intVal=Receive.getInt(dataArray(i)(j).buf )),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("intVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="float")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  classData.floatVal=Receive.getFloat(dataArray(i)(j).buf )),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("floatVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }

                resArray.add(result3);

            }
            else
            {
                if(typeArray(i)=="String")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData classData.strVal=dataArray(i)(j)} ),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("beforData"), resArray(i))
                            .set(String("strVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="int")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  {beforData classData.intVal=Receive.getInt(dataArray(i)(j).buf )}),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("beforData"), resArray(i))
                            .set(String("intVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="float")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast {beforData  classData.floatVal=Receive.getFloat(dataArray(i)(j).buf )}),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("dataArray"), Core.Data.Ast.Identifier("dataArray"))
                            .set(String("i"), Core.Data.Ast.Identifier("i"))
                            .set(String("j"), Core.Data.Ast.IntegerLiteral(iString))
                            .set(String("beforData"), resArray(i))
                            .set(String("floatVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }

                resArray.add(result3);
            }
        }

        // trans data to string to add it to the database

        resArray2.add(result2);
        for i=0 , i< typeArray.getLength() , i=i+1
        {
            if (i==0)
            {
                if(typeArray(i)=="String")
                {
                    if !Spp.astMgr.buildAst
                        (
                        ast  {data.add(this.strVal) colname.add(String("{{strVal}}")) Console.print( colname(0) + " \n"); },
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("strVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="int")
                {
                    if !Spp.astMgr.buildAst
                        (
                        ast { data.add(String( String("") + this.intVal)) colname.add(String("{{intVal}}")) },
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("intVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="float")
                {
                    if !Spp.astMgr.buildAst
                        (
                        ast  {data.add(String( String("") + this.floatVal)) colname.add(String("{{floatVal}}")) },
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("floatVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                        System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                resArray2.add(result3);
            }
            else
            {
                if(typeArray(i)=="String")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast{ beforData data.add(this.strVal) colname.add(String("{{strVal}}"))   } ),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("beforData"), resArray2(i))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("strVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="int")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast  {beforData  data.add(String( String("") + this.intVal)) colname.add(String("{{intVal}}")) }),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("beforData"), resArray2(i))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("intVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                if(typeArray(i)=="float")
                {
                    if !Spp.astMgr.buildAst
                        (
                        (ast {beforData data.add(String( String("") +this.floatVal))  colname.add(String("{{floatVal}}")) }),
                        Map[String, ref[TiObject]]()
                            .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                            .set(String("data"), Core.Data.Ast.Identifier("data"))
                            .set(String("beforData"), resArray2(i))
                            .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                            .set(String("floatVal"), Core.Data.Ast.Identifier(varArray(i))),
                        result3
                        )
                    {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                    }
                }
                resArray2.add(result3);
            }
        }

        //init ref and = inint

        resArray3.add(result2);
        for i=0 , i< typeArray.getLength() , i=i+1
        {
            if (i==0)
            {
                if !Spp.astMgr.buildAst
                    (
                    (ast  this.varItem=value.varItem ) ,
                    Map[String, ref[TiObject]]()
                        .set(String("varItem"), Core.Data.Ast.Identifier(varArray(i))),
                    result3
                    )
                {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                }
                resArray3.add(result3);
            }
            else
            {
                if !Spp.astMgr.buildAst
                    (
                    (ast{ beforData this.varItem=value.varItem;  } ),
                    Map[String, ref[TiObject]]()
                        .set(String("classData"), Core.Data.Ast.Identifier("classData"))
                        .set(String("data"), Core.Data.Ast.Identifier("data"))
                        .set(String("colname"), Core.Data.Ast.Identifier("colname"))
                        .set(String("beforData"), resArray3(i))
                        .set(String("varItem"), Core.Data.Ast.Identifier(varArray(i))),
                    result3
                    )
                {
                    System.fail(1, "generateDataType/build Data Type var : error\n");
                }
                resArray3.add(result3);
            }
        }
        if !Spp.astMgr.buildAst(
            (ast handler this~init(){ }  ),
            Map[String, ref[TiObject]]()
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),


            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);

              if !Spp.astMgr.buildAst(
           (ast handler this~init(ref[className])
           {

                initfunc

            }  ),
            Map[String, ref[TiObject]]()
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("initfunc"), resArray3(resArray3.getLength()-1))
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),


            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);

                     if !Spp.astMgr.buildAst(
           (ast handler this= ref[className]
           {

                initfunc

            }  ),
            Map[String, ref[TiObject]]()
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("initfunc"), resArray3(resArray3.getLength()-1))
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),


            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);


if !Spp.astMgr.buildAst(
           (ast handler this.setDbCon(DbsCon :DbConBuilder )
           {
               this.DbCon =DbsCon;

               }  ),
            Map[String, ref[TiObject]]()
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),


            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);

       if !Spp.astMgr.buildAst(
           (ast handler this.getDbCon(  ):DbConBuilder.DbConBuilder
           {
               return this.DbCon;

               }  ),
            Map[String, ref[TiObject]]()
                .set(String("DbCon"), Core.Data.Ast.Identifier(String("DbCon"))),
            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);

                if !Spp.astMgr.buildAst(
           (ast handler this.getData() : Array[cn]
           {
               def table : Receive.Receive ;
               def  mySqlObj : MySql.Db ;
               def  dataArray : Array[Array[String]];
               def data : Array[cn];

              if this.DbCon.getDbConType()==0
                 {
                      mySqlObj=this.DbCon.mySqlConBuilder();  table.setMySqlObj(mySqlObj);



                 }

                                  def s : Array[String];
                 s.add(String("{{className}}") );
                 table.setTableName(s);
             table.setExecString();
              table.setData();
             dataArray= table.getData();
             def i : int =0;
             for i=0 , i< dataArray.getLength() , i+=1
             {
             buildclassData
             getclassData
             data.add(classData);

             }

             return data;


             }  ),
            Map[String, ref[TiObject]]()
                .set(String("cn"), Core.Data.Ast.Identifier(className))
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("buildclassData"), result2)
                .set(String("getclassData"), resArray(resArray.getLength()-1))
                .set(String("table"), Core.Data.Ast.Identifier(String("table")))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj")))
                .set(String("dataArray"), Core.Data.Ast.Identifier(String("dataArray")))
                .set(String("data"), Core.Data.Ast.Identifier(String("data")))
                .set(String("s"), Core.Data.Ast.Identifier(String("s")))
                .set(String("varType"), Core.Data.Ast.Identifier(String("varType"))),

            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);

       if !Spp.astMgr.buildAst(
           (ast handler this.saveData()
           {
               def table2 : Insert.Insert;
               def  mySqlObj : MySql.Db ;
               def  data : Array[String];
               def colname : Array[String];
               def state : int=0;

              if this.DbCon.getDbConType()==0
                 {
                      mySqlObj=this.DbCon.mySqlConBuilder();  table2.setMySqlObj(mySqlObj);



                 }




                 table2.setTableName(String("{{className}}" ));

             getclassData


             table2.setData(data);
             table2.setColsName(colname);
             table2.genrateColsString();
             table2.setValString();
             table2.setExecString();

            table2.exec();
             }  ),
            Map[String, ref[TiObject]]()
                .set(String("cn"), Core.Data.Ast.Identifier(className))
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("strVal"), Core.Data.Ast.Identifier(varArray(1)))
                .set(String("getclassData"), resArray2(resArray2.getLength()-1))

                .set(String("table2"), Core.Data.Ast.Identifier(String("table2")))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj")))
                .set(String("dataArray"), Core.Data.Ast.Identifier(String("dataArray")))
                .set(String("data"), Core.Data.Ast.Identifier(String("data")))
                .set(String("s"), Core.Data.Ast.Identifier(String("s")))
                .set(String("varType"), Core.Data.Ast.Identifier(String("varType"))),

            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);
             if !Spp.astMgr.buildAst(
           (ast handler this.deleteRowData( whereState : String )
           {

               def  mySqlObj : MySql.Db ;

               def table : Delete.Delete;
              if this.DbCon.getDbConType()==0
                 {
                      mySqlObj=this.DbCon.mySqlConBuilder();
                       table.setMySqlObj(mySqlObj);
                 }
                 table.setTableName(String("{{className}}" ));
                 table.setWhereCond(whereState);
                 table.genareteExecString();
                 table.exec();
             }  ),
            Map[String, ref[TiObject]]()
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj")))
                .set(String("table"), Core.Data.Ast.Identifier(String("table"))),

            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);


        if !Spp.astMgr.buildAst(
           (ast handler this.updateData(conString : String)
           {
               def table2 : Update.Update;
               def  mySqlObj : MySql.Db ;
               def  data : Array[String];
               def colname : Array[String];
               def state : int=0;

              if this.DbCon.getDbConType()==0
                 {
                      mySqlObj=this.DbCon.mySqlConBuilder();  table2.setMySqlObj(mySqlObj);



                 }




                 table2.setTableName(String("{{className}}" ));

             getclassData


             table2.setData(data);
             table2.setColsName(colname);
             table2.setConString(conString);
             table2.setExecString();
            table2.exec();
             }  ),
            Map[String, ref[TiObject]]()
                .set(String("cn"), Core.Data.Ast.Identifier(className))
                .set(String("className"), Core.Data.Ast.Identifier(className))
                .set(String("strVal"), Core.Data.Ast.Identifier(varArray(1)))
                .set(String("getclassData"), resArray2(resArray2.getLength()-1))

                .set(String("table2"), Core.Data.Ast.Identifier(String("table2")))
                .set(String("mySqlObj"), Core.Data.Ast.Identifier(String("mySqlObj")))
                .set(String("dataArray"), Core.Data.Ast.Identifier(String("dataArray")))
                .set(String("data"), Core.Data.Ast.Identifier(String("data")))
                .set(String("s"), Core.Data.Ast.Identifier(String("s")))
                .set(String("varType"), Core.Data.Ast.Identifier(String("varType"))),

            result
        ) {
            System.fail(1, "generateDataType/build Data Type var : error\n");
        }
       listContainer.addElement(result.obj);




    return castSrdRef[list, TiObject];
}

macro getDataType [className , parent] {

    preprocess {
    def varArray : Array[String];
         varArray =AutoBuild.implementGetElementNames[elementType == "var",parent];
    def  typeArray : Array[String];


    typeArray=AutoBuild.implementGetElementTypes[elementType == "var", cars~ast];
        if !Spp.astMgr.insertAst(
            AutoBuild.generateDataType(className , parent ,varArray , typeArray  ).obj
        ) {
            System.fail(1, "Failed to genrate data type.\n");
        }
    }
}





}
