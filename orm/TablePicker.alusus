import "Data";
import "DbConBuilder";
import "Srl/Fs.alusus";
module TablePicker
{
   class StringMaker
   {
       def TableName : String;
       def DbName : String;
       def Mysqlchecker : bool=false;
       def MySqlObj : MySql.Db;
       def Pg : bool=false;
       def PgObj : PostgresSql.Db;
       def SqLite : bool=false;
       def SqLiteObj : Sqlite.Db;
       def ColsNames : Array[String];
       def ColsTypes : Array[String];
       def ExecString :String;
       def FolderPath : String;

       handler this~init()
       {

       }
       handler this~init(TableName : String , DbName : String ,  FolderPath : String )
       {
           this.TableName=TableName;
           this.DbName=DbName;
           this.FolderPath=FolderPath;

       }

       handler this.setTableName(TableName : String)
       {
           this.TableName=TableName;
       }
       handler this.getTableName() : String
       {
           return this.TableName;
       }

       handler this.setFolderPath(FolderPath : String)
       {
           this.FolderPath=FolderPath;
       }
       handler this.getFolderPath() : String
       {
           return this.FolderPath;
       }

       handler this.setDbName(DbName : String)
       {
           this.DbName=DbName;
       }
       handler this.getDbName() : String
       {
           return this.DbName;
       }

       handler this.setMySqlObj(MySqlObj : MySql.Db)
       {
           this.Mysqlchecker=true;
           this.Pg=false;
           this.SqLite=false;
           this.MySqlObj=MySqlObj;
       }
       handler this.getMySqlObj() : Mysql.Db
       {
           return this.MySqlObj;
       }

       handler this.setPgObj(PgObj :  PostgresSql.Db)
       {
           this.Mysqlchecker=false;
           this.Pg=true;
           this.SqLite=false;
           this.PgObj=PgObj;
       }
       handler this.getPgObj() :  PostgresSql.Db
       {
           return this.PgObj;
       }

       handler this.setSqLiteObj(SqliteObj :  Sqlite.Db)
       {
           this.Mysqlchecker=false;
           this.Pg=false;
           this.SqLite=true;
           this.SqliteObj=SqliteObj;
       }
       handler this.getSqLiteObj() :  Sqlite.Db
       {
           return this.SqliteObj;
       }

       handler this.setExecString(ExecString : String)
       {
           this.ExecString=ExecString;
       }
       handler this.getExecString():String
       {
           return this.ExecString;
       }
       handler this.genrateExecString()
       {
           def ExecString : String;
           if(this.Mysqlchecker==true)
           {
               ExecString="SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '";
               ExecString=ExecString+this.DbName +"' AND TABLE_NAME = '";
               ExecString=ExecString+this.TableName +"'" ;

           }
           else if(this.Pg==true)
           {
               ExecString="select column_name, data_type from information_schema.columns where table_name = '";
               ExecString=ExecString+this.TableName +"';" ;
           }
           this.setExecString(ExecString);

       }

       handler this.setColsNames(ColsNames : Array[String])
       {
           this.ColsNames=ColsNames;
       }
       handler this.getColsNames():String
       {
           return this.ColsNames;
       }

       handler this.setColsTypes(ColsTypes : Array[String])
       {
           this.ColsTypes=ColsTypes;
       }
       handler this.getColsTypes():String
       {
           return this.ColsTypes;
       }

       handler this.genrateColsData()
       {
           def ColName : String;
           def ColType : String;
           this.genrateExecString();

           if(this.Mysqlchecker==true)
           {
               if (mysql.Conn==null)
               {
		   Console.print(" %s \n",this.MySqlObj.ConState );
               }
               else
               {
                   this.MySqlObj.exec(this.ExecString.buf);

                   if (this.MySqlObj.ResultState != 0)
	           {
		        Console.print(" %s \n",this.MySqlObj.errorMessage() );
	           }
	           if (this.MySqlObj.Res==null)
	           {
		        Console.print("  %s \n",this.MySqlObj.errorMessage() );
	           }
                   else
	           {
	               def ColsNames : Array[String];
	               def ColsTypes : Array[String];
	               def numberOfFileds : int;
	               numberOfFileds=this.MySqlObj.getFiledsNumber();
	               this.MySqlObj.getRow();
	               this.MySqlObj.getCol();
	               def i:int;
	               while(this.MySqlObj.Row!=null)
	               {
	                   for i = 0, i < numberOfFileds, i = i+1
	                  {
                               Console.print("%s  ", this.MySqlObj.Row~cnt(i));
                               ColName=this.MySqlObj.Row~cnt(0);
                               ColType=this.MySqlObj.Row~cnt(1);
	                  }
	               ColsNames.add(ColName);
	               ColsTypes.add(ColType);
	               Console.print("\n");
	               this.MySqlObj.getRow();

	               }
	               this.setColsNames(ColsNames);
	               this.setColsTypes(ColsTypes);
	           }
               }
           }
       }
       handler this.genrateTableClass():bool
       {
           this.genrateColsData();
           def fp:ptr[Fs.File];
           def fileName : String;
           def path : String;
           def firstLet : String;
           def tale : String;
           def tableName : String;
           def body : String;
           def className : String;
           firstLet=this.TableName.slice(0,1);
           tale=this.TableName.slice(1,this.TableName.getLength());
           firstLet=firstLet.toUpperCase();
           tableName=firstLet+tale;
           className=tableName+"Table";
           fileName=className+".alusus";


           path=this.FolderPath + fileName;
           body = "//this is my auto genrated Class !\n import \"DbConBuilder\";\n Console.print(\" hello there!\\n\");";
           fp=Fs.openFile(path.buf,"w");
           Fs.write(body,char~size,body.getLength(),fp);
           Fs.closeFile(fp);
           return true;
       }
       macro implementGetElementNames [condition, parent  ] {

        Array[String]().{
        preprocess {
            def elements: Array[ref[Core.Basic.TiObject]];
            elements = Spp.astMgr.findElements(
                ast { condition },
                parent,
                Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
            );
            this.generateAddingElementNames(String("this"), elements);
        }}

}
function generateAddingElementNames (varName: String, elements: Array[ref[Core.Basic.TiObject]]) {
    def i: Int;
    for i = 0, i < elements.getLength(), ++i {

        def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);

        def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);

        Spp.astMgr.insertAst(
            ast { names.add(Srl.String("{{name}}")) },
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                .set(Srl.String("name"), binding.getMember("name"))

        );

    }
}
function generateAddingElementTypes (varName: String, elements: Array[ref[Core.Basic.TiObject]]) {
    def i: Int;
    for i = 0, i < elements.getLength(), ++i {
        def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
        def containing: ref[Core.Basic.MapContaining](Core.Basic.getInterface[d, Core.Basic.MapContaining]);
        Spp.astMgr.insertAst(
            ast { names.add(Srl.String("{{name}}")) },
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                .set(Srl.String("name"), castRef[containing.getElement("target"), Core.Data.Ast.Identifier])

        );

    }
}
macro implementGetElementTypes [condition, parent] {
    Array[String]().{
    preprocess {
        def elements: Array[ref[Core.Basic.TiObject]];
        elements = Spp.astMgr.findElements(
            ast { condition },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        this.generateAddingElementTypes(String("this"), elements);
    }
   }
}
function generateCode (varName: String, elements: Array[ref[Core.Basic.TiObject]]) {
    def i: Int;
    for i = 0, i < elements.getLength(), ++i {
        def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
        def containing: ref[Core.Basic.MapContaining](Core.Basic.getInterface[d, Core.Basic.MapContaining]);
        Spp.astMgr.insertAst(
            ast {     Console.print("From AST CODE");
    Console.print("\n");},
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                .set(Srl.String("name"), castRef[containing.getElement("target"), Core.Data.Ast.Identifier])

        );

    }
}

       macro autoBinde [parent  ]
       {
    def val : String;
    def types : Array[String];
    types=this.implementGetElementTypes[elementType == "var", parent];
    var=this.implementGetElementNames[elementType == "var", parent];
    def i : int;
    def j : int;
    def k : int;
    def c : int;
    def index: int;

    c=-1;

    for i=0 , i< var.getLength() , i+=1
       {

    }

    tableConst.setPrimaryKeyConstraint(pkArray);
    table.setTConst(tableConst~ptr);
    table.setTConstString();
    table.setExecString();
    table.setTableName(tableName);
    def ex:String;
    table.setExecString();
    ex=table.getExecString();
    Console.print(ex);
    Console.print("\n");

}

}

def DbCon :  DbConBuilder.DbConBuilder;
def DbName : String="testdb";
DbCon.setDBName(DbName);
def UserName : String="user12";
DbCon.setUserName(UserName);
def Password : String="Qwerty231@#!";
DbCon.setPassword(Password);
def server : String="localhost";
DbCon.setServer(server);
def mysql :MySql.Db;
mysql=DbCon.mySqlConBuilder();
def TableName :String="cars";
def Path : String="/home/sleman231/Desktop/DbEngine/timp/DbEngine/DbEngine/temp/DbEngine/mysql/";
def tablebuild : TablePicker.StringMaker(TableName,DbName,Path);
tablebuild.setMySqlObj(mysql);
tablebuild.genrateExecString();
tablebuild.genrateColsData();
tablebuild.genrateTableClass();

