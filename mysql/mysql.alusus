import "Srl/Console.alusus";
import "libpq.so";
import "libmysqlclient.so";
/*
    Linux .so | .so.0
    Mac OS .dylib
    Windows .lib
*/

module MySql {
	
	class MYSQL{}
	class MYSQL_RES{}
	def MYSQL_ROW: alias ptr[array[CharsPtr]];
	class MYSQL_FIELD
	{
		def name:CharsPtr;
		def org_name:CharsPtr;
		def table:CharsPtr;
		def org_table:CharsPtr;
		def db:CharsPtr;
		def catalog:CharsPtr;
		def define:CharsPtr;
		def length:ArchWord;
		def max_length:ArchWord;
		def name_length:Word;
		def org_name_length:Word;
		def table_length:Word;
		def org_table_length:Word;
		def db_length:Word;
		def catalog_length:Word;
		def def_length:Word;
		def flags:Word;
		def decimals:Word;
		def charsetnr:Word;
		def field_type:int;
		def extension:ptr;	
	}


    class Db {
	
        use Srl;
        def conn: ptr[MYSQL] ;
        def res: ptr[MYSQL_RES] ;
	def result_state: int ;
	def row: MYSQL_ROW;
	def field: ptr[MYSQL_FIELD];



        handler this~init(host: CharsPtr , user: CharsPtr ,password: CharsPtr , db: CharsPtr , port :int , unix_socket: CharsPtr ,client_flag :int ) {
	  this.conn=initl(null);
          this.conn=  connect(this.conn,host , user , password , db , port ,unix_socket ,  client_flag);
          
        }
        

        handler this.exec(sql: CharsPtr) {
            
           this.result_state= MySql.exec(this.conn,sql);   
        }

        handler this.storeRes() {
            this.res= MySql.storeRes(this.conn);
        }

        handler this.getFiledsNumber():int {
            return MySql.getFiledsNumber(this.res);
        }
        handler this.getRow() {
            this.row = MySql.getRow(this.res);
        }

        handler this.getCol() {
            this.field = MySql.getCol(this.res);
        }

        handler this.clearResult(){
             MySql.clearResult(this.res);
        }

        handler this.endConnection(){
             MySql.endConnection(this.conn);
        }

        handler this.errorMessage():CharsPtr{
             return MySql.errorMessage(this.conn);
        }

        handler this.getNextResult(query : CharsPtr , numberOfParam : int , paramValues :ptr[array[CharsPtr]] , dataType : int):int {
             this.result_state= MySql.getNextResult(this.conn );
	     return this.result_state;
        }
    }    
    @expname[mysql_real_connect]
    func connect(ptr[MYSQL],host: CharsPtr , user: CharsPtr ,password: CharsPtr , db: CharsPtr , port :int , unix_socket: CharsPtr ,client_flag :int ) : ptr[MYSQL];
    
    @expname[mysql_query]
    func exec(conn: ptr[MYSQL] , query: CharsPtr): int;

    @expname[mysql_init]
    func initl(conn: ptr[MYSQL] ): ptr[MYSQL];

    @expname[mysql_store_result]
    func storeRes(conn: ptr[MYSQL] ): ptr[MYSQL_RES];

    @expname[mysql_fetch_row]
    func getRow(res: ptr[MYSQL_RES]): MYSQL_ROW;

    @expname[mysql_free_result]
    func clearResult(res: ptr[MYSQL_RES]);

    @expname[mysql_close]
    func endConnection(conn: ptr[MYSQL]);

    @expname[mysql_error]
    func errorMessage(conn: ptr[MYSQL]):CharsPtr;

    @expname[mysql_num_fields]
    func getFiledsNumber(res: ptr[MYSQL_RES]):int;

    @expname[mysql_fetch_field]
    func getCol(res: ptr[MYSQL_RES]):ptr[MYSQL_FIELD];

    @expname[mysql_next_result]
    func getNextResult(conn: ptr[MYSQL]):int;

}